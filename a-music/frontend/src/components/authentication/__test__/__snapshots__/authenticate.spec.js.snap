// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Authenticate tests should renders property 1`] = `
<Authenticate
  handleClickShowPassword={[MockFunction]}
  handleMouseDownPassword={[MockFunction]}
  handleSubmit={[MockFunction]}
  signIn={[MockFunction]}
>
  <Formik
    id="formik"
    initialValues={
      Object {
        "password": "",
        "showPassword": false,
        "username": "",
      }
    }
    onSubmit={[Function]}
    validationSchema={
      ObjectSchema {
        "_blacklist": RefSet {
          "list": Set {},
          "refs": Map {},
        },
        "_conditions": Array [],
        "_defaultDefault": [Function],
        "_deps": Array [],
        "_excludedEdges": Array [],
        "_exclusive": Object {},
        "_mutate": undefined,
        "_nodes": Array [
          "password",
          "username",
        ],
        "_options": Object {
          "abortEarly": true,
          "recursive": true,
        },
        "_type": "object",
        "_typeError": [Function],
        "_whitelist": RefSet {
          "list": Set {},
          "refs": Map {},
        },
        "fields": Object {
          "password": StringSchema {
            "_blacklist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "_conditions": Array [],
            "_deps": Array [],
            "_exclusive": Object {
              "required": true,
            },
            "_mutate": undefined,
            "_options": Object {
              "abortEarly": true,
              "recursive": true,
            },
            "_type": "string",
            "_typeError": [Function],
            "_whitelist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "tests": Array [
              [Function],
            ],
            "transforms": Array [
              [Function],
            ],
            "type": "string",
          },
          "username": StringSchema {
            "_blacklist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "_conditions": Array [],
            "_deps": Array [],
            "_exclusive": Object {
              "required": true,
            },
            "_mutate": undefined,
            "_options": Object {
              "abortEarly": true,
              "recursive": true,
            },
            "_type": "string",
            "_typeError": [Function],
            "_whitelist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "tests": Array [
              [Function],
            ],
            "transforms": Array [
              [Function],
            ],
            "type": "string",
          },
        },
        "tests": Array [],
        "transforms": Array [
          [Function],
        ],
        "type": "object",
      }
    }
  >
    <Styled(Form)
      data-testid="authenticate-form"
    >
      <Form
        className="sc-AxjAm jarUeW AuthenticateWrappedForm"
        data-testid="authenticate-form"
      >
        <form
          action="#"
          className="sc-AxjAm jarUeW AuthenticateWrappedForm"
          data-testid="authenticate-form"
          onReset={[Function]}
          onSubmit={[Function]}
        >
          <Field
            name="username"
          >
            <t
              alwaysDefaultMask={false}
              areaCodes={null}
              autoFormat={true}
              autocompleteSearch={false}
              buttonClass=""
              buttonStyle={Object {}}
              containerClass=""
              containerStyle={Object {}}
              copyNumbersOnly={true}
              country=""
              countryCodeEditable={true}
              defaultErrorMessage=""
              defaultMask="... ... ... ... .."
              disableCountryCode={false}
              disableDropdown={false}
              disableSearchIcon={false}
              disabled={false}
              dropdownClass=""
              dropdownStyle={Object {}}
              enableAreaCodeStretch={false}
              enableAreaCodes={false}
              enableClickOutside={true}
              enableLongNumbers={false}
              enableSearch={false}
              enableTerritories={false}
              excludeCountries={Array []}
              flagsImagePath="./flags.png"
              inputClass="phone-input"
              inputProps={Object {}}
              inputStyle={Object {}}
              isValid={true}
              jumpCursorToEnd={true}
              keys={
                Object {
                  "A": 65,
                  "DOWN": 40,
                  "ENTER": 13,
                  "ESC": 27,
                  "LEFT": 37,
                  "PLUS": 43,
                  "RIGHT": 39,
                  "SPACE": 32,
                  "UP": 38,
                  "Z": 90,
                }
              }
              localization={Object {}}
              masks={null}
              onChange={[Function]}
              onEnterKeyPress={null}
              onlyCountries={Array []}
              placeholder="Enter your phone"
              preferredCountries={Array []}
              prefix="+"
              preserveOrder={Array []}
              priority={null}
              regions=""
              renderStringAsFlag=""
              searchClass=""
              searchNotFound="No entries to show"
              searchPlaceholder="search"
              searchStyle={Object {}}
              showDropdown={false}
              value=""
            >
              <div
                className=" react-tel-input"
                onKeyDown={[Function]}
                style={Object {}}
              >
                <input
                  className="phone-input form-control"
                  disabled={false}
                  onBlur={[Function]}
                  onChange={[Function]}
                  onClick={[Function]}
                  onCopy={[Function]}
                  onDoubleClick={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  placeholder="Enter your phone"
                  style={Object {}}
                  type="tel"
                  value=""
                />
                <div
                  className=" flag-dropdown"
                  role="button"
                  style={Object {}}
                  tabIndex="0"
                >
                  <div
                    className="selected-flag"
                    onClick={[Function]}
                    title=""
                  >
                    <div
                      className="flag 0"
                    >
                      <div
                        className="arrow"
                      />
                    </div>
                  </div>
                </div>
              </div>
            </t>
          </Field>
          <div
            className="password"
          >
            <WithStyles(ForwardRef(TextField))
              InputProps={
                Object {
                  "endAdornment": <ForwardRef(WithStyles)
                    position="end"
                  >
                    <ForwardRef(WithStyles)
                      aria-label="toggle password visibility"
                      data-testid="showPassword-btn"
                      edge="end"
                      onClick={[Function]}
                      onMouseDown={[Function]}
                    >
                      <UNDEFINED />
                    </ForwardRef(WithStyles)>
                  </ForwardRef(WithStyles)>,
                }
              }
              error={false}
              fullWidth={true}
              id="outlined-password"
              label="Password"
              name="password"
              onChange={[Function]}
              placeholder="enter your password"
              type="password"
              value=""
              variant="outlined"
            >
              <ForwardRef(TextField)
                InputProps={
                  Object {
                    "endAdornment": <ForwardRef(WithStyles)
                      position="end"
                    >
                      <ForwardRef(WithStyles)
                        aria-label="toggle password visibility"
                        data-testid="showPassword-btn"
                        edge="end"
                        onClick={[Function]}
                        onMouseDown={[Function]}
                      >
                        <UNDEFINED />
                      </ForwardRef(WithStyles)>
                    </ForwardRef(WithStyles)>,
                  }
                }
                classes={
                  Object {
                    "root": "MuiTextField-root",
                  }
                }
                error={false}
                fullWidth={true}
                id="outlined-password"
                label="Password"
                name="password"
                onChange={[Function]}
                placeholder="enter your password"
                type="password"
                value=""
                variant="outlined"
              >
                <WithStyles(ForwardRef(FormControl))
                  className="MuiTextField-root"
                  color="primary"
                  disabled={false}
                  error={false}
                  fullWidth={true}
                  required={false}
                  variant="outlined"
                >
                  <ForwardRef(FormControl)
                    className="MuiTextField-root"
                    classes={
                      Object {
                        "fullWidth": "MuiFormControl-fullWidth",
                        "marginDense": "MuiFormControl-marginDense",
                        "marginNormal": "MuiFormControl-marginNormal",
                        "root": "MuiFormControl-root",
                      }
                    }
                    color="primary"
                    disabled={false}
                    error={false}
                    fullWidth={true}
                    required={false}
                    variant="outlined"
                  >
                    <div
                      className="MuiFormControl-root MuiTextField-root MuiFormControl-fullWidth"
                    >
                      <WithStyles(ForwardRef(InputLabel))
                        htmlFor="outlined-password"
                        id="outlined-password-label"
                      >
                        <ForwardRef(InputLabel)
                          classes={
                            Object {
                              "animated": "MuiInputLabel-animated",
                              "asterisk": "MuiInputLabel-asterisk",
                              "disabled": "Mui-disabled",
                              "error": "Mui-error",
                              "filled": "MuiInputLabel-filled",
                              "focused": "Mui-focused",
                              "formControl": "MuiInputLabel-formControl",
                              "marginDense": "MuiInputLabel-marginDense",
                              "outlined": "MuiInputLabel-outlined",
                              "required": "Mui-required",
                              "root": "MuiInputLabel-root",
                              "shrink": "MuiInputLabel-shrink",
                            }
                          }
                          htmlFor="outlined-password"
                          id="outlined-password-label"
                        >
                          <WithStyles(ForwardRef(FormLabel))
                            className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-outlined"
                            classes={
                              Object {
                                "asterisk": "MuiInputLabel-asterisk",
                                "disabled": "Mui-disabled",
                                "error": "Mui-error",
                                "focused": "Mui-focused",
                                "required": "Mui-required",
                              }
                            }
                            data-shrink={false}
                            htmlFor="outlined-password"
                            id="outlined-password-label"
                          >
                            <ForwardRef(FormLabel)
                              className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-outlined"
                              classes={
                                Object {
                                  "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                                  "colorSecondary": "MuiFormLabel-colorSecondary",
                                  "disabled": "Mui-disabled Mui-disabled",
                                  "error": "Mui-error Mui-error",
                                  "filled": "MuiFormLabel-filled",
                                  "focused": "Mui-focused Mui-focused",
                                  "required": "Mui-required Mui-required",
                                  "root": "MuiFormLabel-root",
                                }
                              }
                              data-shrink={false}
                              htmlFor="outlined-password"
                              id="outlined-password-label"
                            >
                              <label
                                className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-outlined"
                                data-shrink={false}
                                htmlFor="outlined-password"
                                id="outlined-password-label"
                              >
                                Password
                              </label>
                            </ForwardRef(FormLabel)>
                          </WithStyles(ForwardRef(FormLabel))>
                        </ForwardRef(InputLabel)>
                      </WithStyles(ForwardRef(InputLabel))>
                      <WithStyles(ForwardRef(OutlinedInput))
                        autoFocus={false}
                        endAdornment={
                          <ForwardRef(WithStyles)
                            position="end"
                          >
                            <ForwardRef(WithStyles)
                              aria-label="toggle password visibility"
                              data-testid="showPassword-btn"
                              edge="end"
                              onClick={[Function]}
                              onMouseDown={[Function]}
                            >
                              <UNDEFINED />
                            </ForwardRef(WithStyles)>
                          </ForwardRef(WithStyles)>
                        }
                        fullWidth={true}
                        id="outlined-password"
                        label={
                          <React.Fragment>
                            Password
                          </React.Fragment>
                        }
                        multiline={false}
                        name="password"
                        onChange={[Function]}
                        placeholder="enter your password"
                        type="password"
                        value=""
                      >
                        <ForwardRef(OutlinedInput)
                          autoFocus={false}
                          classes={
                            Object {
                              "adornedEnd": "MuiOutlinedInput-adornedEnd",
                              "adornedStart": "MuiOutlinedInput-adornedStart",
                              "colorSecondary": "MuiOutlinedInput-colorSecondary",
                              "disabled": "Mui-disabled",
                              "error": "Mui-error",
                              "focused": "Mui-focused",
                              "input": "MuiOutlinedInput-input",
                              "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                              "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                              "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                              "inputMultiline": "MuiOutlinedInput-inputMultiline",
                              "marginDense": "MuiOutlinedInput-marginDense",
                              "multiline": "MuiOutlinedInput-multiline",
                              "notchedOutline": "MuiOutlinedInput-notchedOutline",
                              "root": "MuiOutlinedInput-root",
                            }
                          }
                          endAdornment={
                            <ForwardRef(WithStyles)
                              position="end"
                            >
                              <ForwardRef(WithStyles)
                                aria-label="toggle password visibility"
                                data-testid="showPassword-btn"
                                edge="end"
                                onClick={[Function]}
                                onMouseDown={[Function]}
                              >
                                <UNDEFINED />
                              </ForwardRef(WithStyles)>
                            </ForwardRef(WithStyles)>
                          }
                          fullWidth={true}
                          id="outlined-password"
                          label={
                            <React.Fragment>
                              Password
                            </React.Fragment>
                          }
                          multiline={false}
                          name="password"
                          onChange={[Function]}
                          placeholder="enter your password"
                          type="password"
                          value=""
                        >
                          <WithStyles(ForwardRef(InputBase))
                            autoFocus={false}
                            classes={
                              Object {
                                "adornedEnd": "MuiOutlinedInput-adornedEnd",
                                "adornedStart": "MuiOutlinedInput-adornedStart",
                                "colorSecondary": "MuiOutlinedInput-colorSecondary",
                                "disabled": "Mui-disabled",
                                "error": "Mui-error",
                                "focused": "Mui-focused",
                                "input": "MuiOutlinedInput-input",
                                "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                                "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                                "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                                "inputMultiline": "MuiOutlinedInput-inputMultiline",
                                "marginDense": "MuiOutlinedInput-marginDense",
                                "multiline": "MuiOutlinedInput-multiline",
                                "notchedOutline": null,
                                "root": "MuiOutlinedInput-root",
                              }
                            }
                            endAdornment={
                              <ForwardRef(WithStyles)
                                position="end"
                              >
                                <ForwardRef(WithStyles)
                                  aria-label="toggle password visibility"
                                  data-testid="showPassword-btn"
                                  edge="end"
                                  onClick={[Function]}
                                  onMouseDown={[Function]}
                                >
                                  <UNDEFINED />
                                </ForwardRef(WithStyles)>
                              </ForwardRef(WithStyles)>
                            }
                            fullWidth={true}
                            id="outlined-password"
                            inputComponent="input"
                            multiline={false}
                            name="password"
                            onChange={[Function]}
                            placeholder="enter your password"
                            renderSuffix={[Function]}
                            type="password"
                            value=""
                          >
                            <ForwardRef(InputBase)
                              autoFocus={false}
                              classes={
                                Object {
                                  "adornedEnd": "MuiInputBase-adornedEnd MuiOutlinedInput-adornedEnd",
                                  "adornedStart": "MuiInputBase-adornedStart MuiOutlinedInput-adornedStart",
                                  "colorSecondary": "MuiInputBase-colorSecondary MuiOutlinedInput-colorSecondary",
                                  "disabled": "Mui-disabled Mui-disabled",
                                  "error": "Mui-error Mui-error",
                                  "focused": "Mui-focused Mui-focused",
                                  "formControl": "MuiInputBase-formControl",
                                  "fullWidth": "MuiInputBase-fullWidth",
                                  "input": "MuiInputBase-input MuiOutlinedInput-input",
                                  "inputAdornedEnd": "MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd",
                                  "inputAdornedStart": "MuiInputBase-inputAdornedStart MuiOutlinedInput-inputAdornedStart",
                                  "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                  "inputMarginDense": "MuiInputBase-inputMarginDense MuiOutlinedInput-inputMarginDense",
                                  "inputMultiline": "MuiInputBase-inputMultiline MuiOutlinedInput-inputMultiline",
                                  "inputTypeSearch": "MuiInputBase-inputTypeSearch",
                                  "marginDense": "MuiInputBase-marginDense MuiOutlinedInput-marginDense",
                                  "multiline": "MuiInputBase-multiline MuiOutlinedInput-multiline",
                                  "root": "MuiInputBase-root MuiOutlinedInput-root",
                                }
                              }
                              endAdornment={
                                <ForwardRef(WithStyles)
                                  position="end"
                                >
                                  <ForwardRef(WithStyles)
                                    aria-label="toggle password visibility"
                                    data-testid="showPassword-btn"
                                    edge="end"
                                    onClick={[Function]}
                                    onMouseDown={[Function]}
                                  >
                                    <UNDEFINED />
                                  </ForwardRef(WithStyles)>
                                </ForwardRef(WithStyles)>
                              }
                              fullWidth={true}
                              id="outlined-password"
                              inputComponent="input"
                              multiline={false}
                              name="password"
                              onChange={[Function]}
                              placeholder="enter your password"
                              renderSuffix={[Function]}
                              type="password"
                              value=""
                            >
                              <div
                                className="MuiInputBase-root MuiOutlinedInput-root MuiInputBase-fullWidth MuiInputBase-formControl MuiInputBase-adornedEnd MuiOutlinedInput-adornedEnd"
                                onClick={[Function]}
                              >
                                <input
                                  aria-invalid={false}
                                  autoFocus={false}
                                  className="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                  disabled={false}
                                  id="outlined-password"
                                  name="password"
                                  onAnimationStart={[Function]}
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  onFocus={[Function]}
                                  placeholder="enter your password"
                                  required={false}
                                  type="password"
                                  value=""
                                />
                                <WithStyles(ForwardRef(InputAdornment))
                                  position="end"
                                >
                                  <ForwardRef(InputAdornment)
                                    classes={
                                      Object {
                                        "disablePointerEvents": "MuiInputAdornment-disablePointerEvents",
                                        "filled": "MuiInputAdornment-filled",
                                        "hiddenLabel": "MuiInputAdornment-hiddenLabel",
                                        "marginDense": "MuiInputAdornment-marginDense",
                                        "positionEnd": "MuiInputAdornment-positionEnd",
                                        "positionStart": "MuiInputAdornment-positionStart",
                                        "root": "MuiInputAdornment-root",
                                      }
                                    }
                                    position="end"
                                  >
                                    <div
                                      className="MuiInputAdornment-root MuiInputAdornment-positionEnd"
                                    >
                                      <WithStyles(ForwardRef(IconButton))
                                        aria-label="toggle password visibility"
                                        data-testid="showPassword-btn"
                                        edge="end"
                                        onClick={[Function]}
                                        onMouseDown={[Function]}
                                      >
                                        <ForwardRef(IconButton)
                                          aria-label="toggle password visibility"
                                          classes={
                                            Object {
                                              "colorInherit": "MuiIconButton-colorInherit",
                                              "colorPrimary": "MuiIconButton-colorPrimary",
                                              "colorSecondary": "MuiIconButton-colorSecondary",
                                              "disabled": "Mui-disabled",
                                              "edgeEnd": "MuiIconButton-edgeEnd",
                                              "edgeStart": "MuiIconButton-edgeStart",
                                              "label": "MuiIconButton-label",
                                              "root": "MuiIconButton-root",
                                              "sizeSmall": "MuiIconButton-sizeSmall",
                                            }
                                          }
                                          data-testid="showPassword-btn"
                                          edge="end"
                                          onClick={[Function]}
                                          onMouseDown={[Function]}
                                        >
                                          <WithStyles(ForwardRef(ButtonBase))
                                            aria-label="toggle password visibility"
                                            centerRipple={true}
                                            className="MuiIconButton-root MuiIconButton-edgeEnd"
                                            data-testid="showPassword-btn"
                                            disabled={false}
                                            focusRipple={true}
                                            onClick={[Function]}
                                            onMouseDown={[Function]}
                                          >
                                            <ForwardRef(ButtonBase)
                                              aria-label="toggle password visibility"
                                              centerRipple={true}
                                              className="MuiIconButton-root MuiIconButton-edgeEnd"
                                              classes={
                                                Object {
                                                  "disabled": "Mui-disabled",
                                                  "focusVisible": "Mui-focusVisible",
                                                  "root": "MuiButtonBase-root",
                                                }
                                              }
                                              data-testid="showPassword-btn"
                                              disabled={false}
                                              focusRipple={true}
                                              onClick={[Function]}
                                              onMouseDown={[Function]}
                                            >
                                              <button
                                                aria-label="toggle password visibility"
                                                className="MuiButtonBase-root MuiIconButton-root MuiIconButton-edgeEnd"
                                                data-testid="showPassword-btn"
                                                disabled={false}
                                                onBlur={[Function]}
                                                onClick={[Function]}
                                                onDragLeave={[Function]}
                                                onFocus={[Function]}
                                                onKeyDown={[Function]}
                                                onKeyUp={[Function]}
                                                onMouseDown={[Function]}
                                                onMouseLeave={[Function]}
                                                onMouseUp={[Function]}
                                                onTouchEnd={[Function]}
                                                onTouchMove={[Function]}
                                                onTouchStart={[Function]}
                                                tabIndex={0}
                                                type="button"
                                              >
                                                <span
                                                  className="MuiIconButton-label"
                                                >
                                                  <ForwardRef>
                                                    <WithStyles(ForwardRef(SvgIcon))>
                                                      <ForwardRef(SvgIcon)
                                                        classes={
                                                          Object {
                                                            "colorAction": "MuiSvgIcon-colorAction",
                                                            "colorDisabled": "MuiSvgIcon-colorDisabled",
                                                            "colorError": "MuiSvgIcon-colorError",
                                                            "colorPrimary": "MuiSvgIcon-colorPrimary",
                                                            "colorSecondary": "MuiSvgIcon-colorSecondary",
                                                            "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                                            "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                                            "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                                            "root": "MuiSvgIcon-root",
                                                          }
                                                        }
                                                      >
                                                        <svg
                                                          aria-hidden={true}
                                                          className="MuiSvgIcon-root"
                                                          focusable="false"
                                                          viewBox="0 0 24 24"
                                                        >
                                                          <path
                                                            d="M12 7c2.76 0 5 2.24 5 5 0 .65-.13 1.26-.36 1.83l2.92 2.92c1.51-1.26 2.7-2.89 3.43-4.75-1.73-4.39-6-7.5-11-7.5-1.4 0-2.74.25-3.98.7l2.16 2.16C10.74 7.13 11.35 7 12 7zM2 4.27l2.28 2.28.46.46C3.08 8.3 1.78 10.02 1 12c1.73 4.39 6 7.5 11 7.5 1.55 0 3.03-.3 4.38-.84l.42.42L19.73 22 21 20.73 3.27 3 2 4.27zM7.53 9.8l1.55 1.55c-.05.21-.08.43-.08.65 0 1.66 1.34 3 3 3 .22 0 .44-.03.65-.08l1.55 1.55c-.67.33-1.41.53-2.2.53-2.76 0-5-2.24-5-5 0-.79.2-1.53.53-2.2zm4.31-.78l3.15 3.15.02-.16c0-1.66-1.34-3-3-3l-.17.01z"
                                                          />
                                                        </svg>
                                                      </ForwardRef(SvgIcon)>
                                                    </WithStyles(ForwardRef(SvgIcon))>
                                                  </ForwardRef>
                                                </span>
                                                <WithStyles(memo)
                                                  center={true}
                                                >
                                                  <ForwardRef(TouchRipple)
                                                    center={true}
                                                    classes={
                                                      Object {
                                                        "child": "MuiTouchRipple-child",
                                                        "childLeaving": "MuiTouchRipple-childLeaving",
                                                        "childPulsate": "MuiTouchRipple-childPulsate",
                                                        "ripple": "MuiTouchRipple-ripple",
                                                        "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                        "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                        "root": "MuiTouchRipple-root",
                                                      }
                                                    }
                                                  >
                                                    <span
                                                      className="MuiTouchRipple-root"
                                                    >
                                                      <TransitionGroup
                                                        childFactory={[Function]}
                                                        component={null}
                                                        exit={true}
                                                      />
                                                    </span>
                                                  </ForwardRef(TouchRipple)>
                                                </WithStyles(memo)>
                                              </button>
                                            </ForwardRef(ButtonBase)>
                                          </WithStyles(ForwardRef(ButtonBase))>
                                        </ForwardRef(IconButton)>
                                      </WithStyles(ForwardRef(IconButton))>
                                    </div>
                                  </ForwardRef(InputAdornment)>
                                </WithStyles(ForwardRef(InputAdornment))>
                                <WithStyles(ForwardRef(NotchedOutline))
                                  className="MuiOutlinedInput-notchedOutline"
                                  label={
                                    <React.Fragment>
                                      Password
                                    </React.Fragment>
                                  }
                                  labelWidth={0}
                                  notched={false}
                                >
                                  <ForwardRef(NotchedOutline)
                                    className="MuiOutlinedInput-notchedOutline"
                                    classes={
                                      Object {
                                        "legend": "PrivateNotchedOutline-legend-88",
                                        "legendLabelled": "PrivateNotchedOutline-legendLabelled-89",
                                        "legendNotched": "PrivateNotchedOutline-legendNotched-90",
                                        "root": "PrivateNotchedOutline-root-87",
                                      }
                                    }
                                    label={
                                      <React.Fragment>
                                        Password
                                      </React.Fragment>
                                    }
                                    labelWidth={0}
                                    notched={false}
                                  >
                                    <fieldset
                                      aria-hidden={true}
                                      className="PrivateNotchedOutline-root-87 MuiOutlinedInput-notchedOutline"
                                    >
                                      <legend
                                        className="PrivateNotchedOutline-legendLabelled-89"
                                      >
                                        <span>
                                          Password
                                        </span>
                                      </legend>
                                    </fieldset>
                                  </ForwardRef(NotchedOutline)>
                                </WithStyles(ForwardRef(NotchedOutline))>
                              </div>
                            </ForwardRef(InputBase)>
                          </WithStyles(ForwardRef(InputBase))>
                        </ForwardRef(OutlinedInput)>
                      </WithStyles(ForwardRef(OutlinedInput))>
                    </div>
                  </ForwardRef(FormControl)>
                </WithStyles(ForwardRef(FormControl))>
              </ForwardRef(TextField)>
            </WithStyles(ForwardRef(TextField))>
          </div>
          <WithStyles(ForwardRef(Button))
            className="auth-button"
            color="primary"
            data-testid="submit-btn"
            fullWidth={true}
            id="authBtn"
            size="large"
            type="submit"
            variant="outlined"
          >
            <ForwardRef(Button)
              className="auth-button"
              classes={
                Object {
                  "colorInherit": "MuiButton-colorInherit",
                  "contained": "MuiButton-contained",
                  "containedPrimary": "MuiButton-containedPrimary",
                  "containedSecondary": "MuiButton-containedSecondary",
                  "containedSizeLarge": "MuiButton-containedSizeLarge",
                  "containedSizeSmall": "MuiButton-containedSizeSmall",
                  "disableElevation": "MuiButton-disableElevation",
                  "disabled": "Mui-disabled",
                  "endIcon": "MuiButton-endIcon",
                  "focusVisible": "Mui-focusVisible",
                  "fullWidth": "MuiButton-fullWidth",
                  "iconSizeLarge": "MuiButton-iconSizeLarge",
                  "iconSizeMedium": "MuiButton-iconSizeMedium",
                  "iconSizeSmall": "MuiButton-iconSizeSmall",
                  "label": "MuiButton-label",
                  "outlined": "MuiButton-outlined",
                  "outlinedPrimary": "MuiButton-outlinedPrimary",
                  "outlinedSecondary": "MuiButton-outlinedSecondary",
                  "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                  "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                  "root": "MuiButton-root",
                  "sizeLarge": "MuiButton-sizeLarge",
                  "sizeSmall": "MuiButton-sizeSmall",
                  "startIcon": "MuiButton-startIcon",
                  "text": "MuiButton-text",
                  "textPrimary": "MuiButton-textPrimary",
                  "textSecondary": "MuiButton-textSecondary",
                  "textSizeLarge": "MuiButton-textSizeLarge",
                  "textSizeSmall": "MuiButton-textSizeSmall",
                }
              }
              color="primary"
              data-testid="submit-btn"
              fullWidth={true}
              id="authBtn"
              size="large"
              type="submit"
              variant="outlined"
            >
              <WithStyles(ForwardRef(ButtonBase))
                className="MuiButton-root MuiButton-outlined auth-button MuiButton-outlinedPrimary MuiButton-outlinedSizeLarge MuiButton-sizeLarge MuiButton-fullWidth"
                component="button"
                data-testid="submit-btn"
                disabled={false}
                focusRipple={true}
                focusVisibleClassName="Mui-focusVisible"
                id="authBtn"
                type="submit"
              >
                <ForwardRef(ButtonBase)
                  className="MuiButton-root MuiButton-outlined auth-button MuiButton-outlinedPrimary MuiButton-outlinedSizeLarge MuiButton-sizeLarge MuiButton-fullWidth"
                  classes={
                    Object {
                      "disabled": "Mui-disabled",
                      "focusVisible": "Mui-focusVisible",
                      "root": "MuiButtonBase-root",
                    }
                  }
                  component="button"
                  data-testid="submit-btn"
                  disabled={false}
                  focusRipple={true}
                  focusVisibleClassName="Mui-focusVisible"
                  id="authBtn"
                  type="submit"
                >
                  <button
                    className="MuiButtonBase-root MuiButton-root MuiButton-outlined auth-button MuiButton-outlinedPrimary MuiButton-outlinedSizeLarge MuiButton-sizeLarge MuiButton-fullWidth"
                    data-testid="submit-btn"
                    disabled={false}
                    id="authBtn"
                    onBlur={[Function]}
                    onDragLeave={[Function]}
                    onFocus={[Function]}
                    onKeyDown={[Function]}
                    onKeyUp={[Function]}
                    onMouseDown={[Function]}
                    onMouseLeave={[Function]}
                    onMouseUp={[Function]}
                    onTouchEnd={[Function]}
                    onTouchMove={[Function]}
                    onTouchStart={[Function]}
                    tabIndex={0}
                    type="submit"
                  >
                    <span
                      className="MuiButton-label"
                    >
                      Log In
                    </span>
                    <WithStyles(memo)
                      center={false}
                    >
                      <ForwardRef(TouchRipple)
                        center={false}
                        classes={
                          Object {
                            "child": "MuiTouchRipple-child",
                            "childLeaving": "MuiTouchRipple-childLeaving",
                            "childPulsate": "MuiTouchRipple-childPulsate",
                            "ripple": "MuiTouchRipple-ripple",
                            "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                            "rippleVisible": "MuiTouchRipple-rippleVisible",
                            "root": "MuiTouchRipple-root",
                          }
                        }
                      >
                        <span
                          className="MuiTouchRipple-root"
                        >
                          <TransitionGroup
                            childFactory={[Function]}
                            component={null}
                            exit={true}
                          />
                        </span>
                      </ForwardRef(TouchRipple)>
                    </WithStyles(memo)>
                  </button>
                </ForwardRef(ButtonBase)>
              </WithStyles(ForwardRef(ButtonBase))>
            </ForwardRef(Button)>
          </WithStyles(ForwardRef(Button))>
        </form>
      </Form>
    </Styled(Form)>
  </Formik>
</Authenticate>
`;